{"version":3,"file":"js/8484.e748db4b.js","mappings":"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","sources":["webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/util/util.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/util/dom-events.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/util/viewport-size.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/slide/pan-bounds.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/slide/zoom-level.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/slide/slide.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/gestures/drag-handler.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/gestures/zoom-handler.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/gestures/tap-handler.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/gestures/gestures.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/main-scroll.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/keyboard.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/util/css-animation.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/util/spring-easer.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/util/spring-animation.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/util/animations.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/scroll-wheel.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/ui/ui-element.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/ui/button-arrow.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/ui/button-close.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/ui/button-zoom.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/ui/loading-indicator.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/ui/counter-indicator.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/ui/ui.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/slide/get-thumb-bounds.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/core/eventable.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/slide/placeholder.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/slide/content.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/slide/loader.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/core/base.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/opener.js","webpack://@coreui/coreui-free-vue-admin-template/../../../src/js/photoswipe.js"],"sourcesContent":["/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName);\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ` scale3d(${scale},${scale},1)`;\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? `${prop} ${duration}ms ${ease || defaultCSSEasing}`\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? `${w}px` : w;\r\n  el.style.height = (typeof h === 'number') ? `${h}px` : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\r\nexport function specialKeyUsed(e) {\r\n  return ('button' in e && e.button === 1) || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n * @returns {boolean}\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\r\n\r\n","// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  /* @ts-ignore */\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document | undefined | null} target\r\n * @prop {string} type\r\n * @prop {EventListenerOrEventListenerObject} listener\r\n * @prop {boolean} [passive]\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type Can be multiple, separated by space.\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @private\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   * @param {boolean} [unbind] Whether the event should be added or removed\r\n   * @param {boolean} [skipPool] Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default DOMEvents;\r\n","/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue = 0;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return Number(paddingValue) || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","import { clamp } from '../util/util.js';\r\nimport { parsePaddingOption } from '../util/viewport-size.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {Record<Axis, number>} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n    this.currZoomLevel = 1;\r\n    this.center = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.max = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.min = /** @type {Point} */ { x: 0, y: 0 };\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By default, it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   * @returns {number}\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\r\n\r\nexport default PanBounds;\r\n","const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n    /** @type { Point | null } */\r\n    this.panAreaSize = null;\r\n    /** @type { Point | null } */\r\n    this.elementSize = null;\r\n    this.fit = 1;\r\n    this.fill = 1;\r\n    this.vFill = 1;\r\n    this.initial = 1;\r\n    this.secondary = 1;\r\n    this.max = 1;\r\n    this.min = 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    /** @type {Point} */\r\n    const elementSize = { x: maxWidth, y: maxHeight };\r\n    this.elementSize = elementSize;\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = panAreaSize.x / elementSize.x;\r\n    const vRatio = panAreaSize.y / elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (\r\n      optionPrefix + 'ZoomLevel'\r\n    );\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @typedef {_SlideData & Record<string, any>} SlideData\r\n * @typedef {Object} _SlideData\r\n * @prop {HTMLElement} [element] thumbnail element\r\n * @prop {string} [src] image URL\r\n * @prop {string} [srcset] image srcset\r\n * @prop {number} [w] image width (deprecated)\r\n * @prop {number} [h] image height (deprecated)\r\n * @prop {number} [width] image width\r\n * @prop {number} [height] image height\r\n * @prop {string} [msrc] placeholder image URL that's displayed before large image is loaded\r\n * @prop {string} [alt] image alt text\r\n * @prop {boolean} [thumbCropped] whether thumbnail is cropped client-side or not\r\n * @prop {string} [html] html content of a slide\r\n * @prop {'image' | 'html' | string} [type] slide type\r\n */\r\n\r\nimport {\r\n  createElement,\r\n  setTransform,\r\n  equalizePoints,\r\n  roundPoint,\r\n  toTransformString,\r\n  clamp,\r\n} from '../util/util.js';\r\n\r\nimport PanBounds from './pan-bounds.js';\r\nimport ZoomLevel from './zoom-level.js';\r\nimport { getPanAreaSize } from '../util/viewport-size.js';\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.pan = { x: 0, y: 0 };\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap', 'div');\r\n    /** @type {HTMLElement | null} */\r\n    this.holderElement = null;\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n    this.heavyAppended = false;\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load(false);\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean} [force] if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** @returns {HTMLImageElement | HTMLDivElement | null | undefined} */\r\n  getPlaceholderElement() {\r\n    return this.content.placeholder?.element;\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {Point} [centerPoint]\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean} [ignoreBounds] Minimum and maximum zoom levels will be ignored.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {Point} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number} [prevZoomLevel] Zoom level before new zoom was applied.\r\n   * @returns {number}\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    if (!prevZoomLevel) {\r\n      prevZoomLevel = this.zoomLevels.initial;\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   * @returns {boolean}\r\n   */\r\n  isPannable() {\r\n    return Boolean(this.width) && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   * @returns {boolean}\r\n   */\r\n  isZoomable() {\r\n    return Boolean(this.width) && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   * @private\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  /** @returns {string} */\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in the highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\r\n\r\nexport default Slide;\r\n","import {\r\n  equalizePoints, roundPoint, clamp\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n * @returns {number}\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = { x: 0, y: 0 };\r\n  }\r\n\r\n  start() {\r\n    if (this.pswp.currSlide) {\r\n      equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    }\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && this.pswp.options.closeOnVerticalDrag\r\n        && (currSlide && currSlide.currZoomLevel <= currSlide.zoomLevels.fit)\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!this.pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        this.pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        if (currSlide) {\r\n          roundPoint(currSlide.pan);\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { velocity } = this.gestures;\r\n    const { mainScroll, currSlide } = this.pswp;\r\n    let indexDiff = 0;\r\n\r\n    this.pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is visible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / this.pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched,\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if ((currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.max)\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { velocity } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (this.pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Increasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        this.pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = this.pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    this.pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && this.pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          this.pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @returns {boolean}\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = this.pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta || !currSlide) {\r\n      return false;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (this.pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   * @returns {number}\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - (this.pswp.currSlide?.bounds.center.y ?? 0)) / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number} [customFriction] (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DragHandler;\r\n","import {\r\n  equalizePoints, getDistanceBetween, clamp, pointsEqual\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startPan = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startZoomPoint = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._zoomPoint = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._wasOverFitZoomLevel = false;\r\n    /** @private */\r\n    this._startZoomLevel = 1;\r\n  }\r\n\r\n  start() {\r\n    const { currSlide } = this.gestures.pswp;\r\n    if (currSlide) {\r\n      this._startZoomLevel = currSlide.currZoomLevel;\r\n      equalizePoints(this._startPan, currSlide.pan);\r\n    }\r\n\r\n    this.gestures.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    if ((!currSlide || currSlide.currZoomLevel < currSlide.zoomLevels.initial)\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   * @returns {number}\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean} [ignoreGesture]\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide?.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === 0) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({ x: 0, y: 0 }, currSlide.pan);\r\n    let destinationPan = equalizePoints({ x: 0, y: 0 }, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    const panNeedsChange = !pointsEqual(destinationPan, initialPan);\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default ZoomHandler;\r\n","/**\r\n * @template T, P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n * @returns {boolean}\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide?.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide?.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element?.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TapHandler;\r\n","import {\r\n  equalizePoints, pointsEqual, getDistanceBetween\r\n} from '../util/util.js';\r\n\r\nimport DragHandler from './drag-handler.js';\r\nimport ZoomHandler from './zoom-handler.js';\r\nimport TapHandler from './tap-handler.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y' | null} */\r\n    this.dragAxis = null;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = { x: 0, y: 0 }; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = { x: 0, y: 0 }; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.prevP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.velocity = { x: 0, y: 0 };\r\n\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._lastStartP1 = { x: 0, y: 0 };\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._intervalP1 = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]}\r\n     * @private\r\n     */\r\n    this._ongoingPointers = [];\r\n    /** @private */\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    /** @private */\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @private */\r\n    this._intervalTime = 0;\r\n    /** @private */\r\n    this._velocityCalculated = false;\r\n    this.isMultitouch = false;\r\n    this.isDragging = false;\r\n    this.isZooming = false;\r\n    /** @type {number | null} */\r\n    this.raf = null;\r\n    /** @type {NodeJS.Timeout | null}\r\n     * @private\r\n     */\r\n    this._tapTimer = null;\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(\r\n        pswp.scrollWrap,\r\n        'click',\r\n        /** @type EventListener */(this._onClick.bind(this))\r\n      );\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        if (pswp.scrollWrap) {\r\n          pswp.scrollWrap.ontouchmove = () => {};\r\n          pswp.scrollWrap.ontouchend = () => {};\r\n        }\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(\r\n      pswp.scrollWrap,\r\n      pref + down,\r\n      /** @type EventListener */(this.onPointerDown.bind(this))\r\n    );\r\n    events.add(window, pref + 'move', /** @type EventListener */(this.onPointerMove.bind(this)));\r\n    events.add(window, pref + up, /** @type EventListener */(this.onPointerUp.bind(this)));\r\n    if (cancelEvent) {\r\n      events.add(\r\n        pswp.scrollWrap,\r\n        cancelEvent,\r\n        /** @type EventListener */(this.onPointerUp.bind(this))\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    const isMousePointer = e.type === 'mousedown' || e.pointerType === 'mouse';\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @private\r\n   * @param {boolean} [force]\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   * @returns {number}\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPointer) => {\r\n        return ongoingPointer.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, { x: 0, y: 0 }));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** update points that were used during previous rAF tick\r\n   * @private\r\n   */\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  /** update points at the start of gesture\r\n   * @private\r\n   */\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  /** @private */\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   * @returns {Point}\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gestures;\r\n","import {\r\n  setTransform,\r\n  createElement,\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n    this.slideWidth = 0;\r\n    /** @private */\r\n    this._currPositionIndex = 0;\r\n    /** @private */\r\n    this._prevPositionIndex = 0;\r\n    /** @private */\r\n    this._containerShiftIndex = -1;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = [];\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean} [resizeSlides] Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', 'div', this.pswp.container);\r\n      el.setAttribute('role', 'group');\r\n      el.setAttribute('aria-roledescription', 'slide');\r\n      el.setAttribute('aria-hidden', 'true');\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   * @returns {boolean}\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean} [animate]\r\n   * @param {number} [velocityX]\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    return Boolean(diff);\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   * @returns {number}\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   * @returns {boolean}\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    /** @type {ItemHolder | undefined} */\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        if (tempHolder) {\r\n          this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n          this._containerShiftIndex++;\r\n\r\n          setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n        }\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        if (tempHolder) {\r\n          this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n          this._containerShiftIndex--;\r\n\r\n          setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1]?.slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    if (pswp.currSlide) {\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean} [dragging]\r\n   */\r\n  moveTo(x, dragging) {\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      let newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      const delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n\r\n    if (this.pswp.container) {\r\n      setTransform(this.pswp.container, x);\r\n    }\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging: dragging ?? false });\r\n  }\r\n}\r\n\r\nexport default MainScroll;\r\n","import { specialKeyUsed } from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\nconst KeyboardKeyCodesMap = {\r\n  Escape: 27,\r\n  z: 90,\r\n  ArrowLeft: 37,\r\n  ArrowUp: 38,\r\n  ArrowRight: 39,\r\n  ArrowDown: 40,\r\n  Tab: 9,\r\n};\r\n\r\n/**\r\n * @template {keyof KeyboardKeyCodesMap} T\r\n * @param {T} key\r\n * @param {boolean} isKeySupported\r\n * @returns {T | number | undefined}\r\n */\r\nconst getKeyboardEventKey = (key, isKeySupported) => {\r\n  return isKeySupported ? key : KeyboardKeyCodesMap[key];\r\n};\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Helps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    /** @private */\r\n    this._wasFocused = false;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', /** @type EventListener */(this._onFocusIn.bind(this)));\r\n      pswp.events.add(document, 'keydown', /** @type EventListener */(this._onKeyDown.bind(this)));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** @private */\r\n  _focusRoot() {\r\n    if (!this._wasFocused && this.pswp.element) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe> | undefined} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y' | undefined} */\r\n    let axis;\r\n    let isForward = false;\r\n    const isKeySupported = 'key' in e;\r\n\r\n    switch (isKeySupported ? e.key : e.keyCode) {\r\n      case getKeyboardEventKey('Escape', isKeySupported):\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case getKeyboardEventKey('z', isKeySupported):\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case getKeyboardEventKey('ArrowLeft', isKeySupported):\r\n        axis = 'x';\r\n        break;\r\n      case getKeyboardEventKey('ArrowUp', isKeySupported):\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('ArrowRight', isKeySupported):\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case getKeyboardEventKey('ArrowDown', isKeySupported):\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('Tab', isKeySupported):\r\n        this._focusRoot();\r\n        break;\r\n      default:\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      // @ts-ignore\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @private\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (template\r\n        && document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Keyboard;\r\n","import { setTransitionStyle, removeTransitionStyle } from './util.js';\r\n\r\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/** @typedef {Object} DefaultCssAnimationProps\r\n *\r\n * @prop {HTMLElement} target\r\n * @prop {number} [duration]\r\n * @prop {string} [easing]\r\n * @prop {string} [transform]\r\n * @prop {string} [opacity]\r\n * */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultCssAnimationProps} CssAnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish = () => {},\r\n      duration = 333,\r\n      easing = DEFAULT_EASING,\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop] ?? '';\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n    /** @private */\r\n    this._finished = false;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transition won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element property was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default CSSAnimation;\r\n","const DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} [dampingRatio]\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} [naturalFrequency]\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    this._dampedFrequency = this._naturalFrequency;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency *= Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\r\n\r\nexport default SpringEaser;\r\n","import SpringEaser from './spring-easer.js';\r\n\r\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/**\r\n * @typedef {Object} DefaultSpringAnimationProps\r\n *\r\n * @prop {number} start\r\n * @prop {number} end\r\n * @prop {number} velocity\r\n * @prop {number} [dampingRatio]\r\n * @prop {number} [naturalFrequency]\r\n * @prop {(end: number) => void} onUpdate\r\n */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultSpringAnimationProps} SpringAnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    this._raf = 0;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish = () => {},\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = 0;\r\n  }\r\n}\r\n\r\nexport default SpringAnimation;\r\n","import CSSAnimation from './css-animation.js';\r\nimport SpringAnimation from './spring-animation.js';\r\n\r\n/** @typedef {import('./css-animation.js').CssAnimationProps} CssAnimationProps */\r\n/** @typedef {import('./spring-animation.js').SpringAnimationProps} SpringAnimationProps */\r\n\r\n/** @typedef {Object} SharedAnimationProps\r\n * @prop {string} [name]\r\n * @prop {boolean} [isPan]\r\n * @prop {boolean} [isMainScroll]\r\n * @prop {VoidFunction} [onComplete]\r\n * @prop {VoidFunction} [onFinish]\r\n */\r\n\r\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n/** @typedef {SpringAnimationProps | CssAnimationProps} AnimationProps */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {AnimationProps} props\r\n   * @param {boolean} [isSpring]\r\n   * @returns {Animation}\r\n   */\r\n  _start(props, isSpring) {\r\n    const animation = isSpring\r\n      ? new SpringAnimation(/** @type SpringAnimationProps */ (props))\r\n      : new CSSAnimation(/** @type CssAnimationProps */ (props));\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Animations;\r\n","/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', /** @type EventListener */(this._onWheel.bind(this)));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScrollWheel;\r\n","import { createElement } from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean} [isCustomSVG]\r\n * @prop {string} inner\r\n * @prop {string} [outlineID]\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string} [className]\r\n * @prop {UIElementMarkup} [html]\r\n * @prop {boolean} [isButton]\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string} [title]\r\n * @prop {string} [ariaLabel]\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number} [order]\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n * @returns {string}\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    /** @type {HTMLElement} */\r\n    const element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      const ariaText = ariaLabel || title;\r\n      if (ariaText) {\r\n        element.setAttribute('aria-label', ariaText);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          // @ts-ignore\r\n          pswp[data.onClick]();\r\n        } else if (typeof data.onClick === 'function') {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    /** @type {HTMLElement | undefined} root element by default */\r\n    let container = pswp.element;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      }\r\n    }\r\n\r\n    container?.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\r\n\r\nexport default UIElement;\r\n","/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean} [isNextButton]\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  // TODO: this should point to a unique id for this instance\r\n  element.setAttribute('aria-controls', 'pswp__items');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\r\n\r\nexport default closeButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\r\n\r\nexport default zoomButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean | undefined} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout | null} */\r\n    let delayTimeout = null;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList.toggle('pswp__preloader--' + className, add);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide?.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(Boolean(pswp.currSlide?.content.isLoading()));\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    if (pswp.ui) {\r\n      pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n    }\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\r\n","import UIElement from './ui-element.js';\r\nimport { arrowPrev, arrowNext } from './button-arrow.js';\r\nimport closeButton from './button-close.js';\r\nimport zoomButton from './button-zoom.js';\r\nimport { loadingIndicator } from './loading-indicator.js';\r\nimport { counterIndicator } from './counter-indicator.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default, it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList.toggle('pswp--zoomed-in', isZoomedIn);\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [];\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = () => {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {number | undefined}\r\n     */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element?.classList.toggle('pswp--one-slide', pswp.getNumItems() === 1);\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   *\r\n   * @private\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n\r\n    if (this.pswp.opener.isClosing || !template || !currSlide) {\r\n      return;\r\n    }\r\n\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\r\n\r\nexport default UI;\r\n","/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @returns Bounds\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n * @returns Bounds\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nexport function getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  /** @type {Bounds | undefined} */\r\n  let thumbBounds;\r\n  /** @type {HTMLElement | null | undefined} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : /** @type {HTMLElement | null} */ (element.querySelector(thumbSelector));\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w || 0,\r\n        itemData.height || itemData.h || 0\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\r\n","/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    this.defaultPrevented = false;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe | undefined} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions | undefined} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name]?.push({ fn, priority });\r\n    this._filters[name]?.sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    this.pswp?.addFilter(name, fn, priority);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    this._filters[name]?.forEach((filter) => {\r\n      // @ts-expect-error\r\n      args[0] = filter.fn.apply(this, args);\r\n    });\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name]?.push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    this.pswp?.on(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    this.pswp?.off(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    this._listeners[name]?.forEach((listener) => {\r\n      listener.call(this, event);\r\n    });\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : 'div',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      const imgEl = /** @type {HTMLImageElement} */ (this.element);\r\n      imgEl.decoding = 'async';\r\n      imgEl.alt = '';\r\n      imgEl.src = imageSrc;\r\n      imgEl.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element?.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","import { createElement, isSafari, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {Placeholder | undefined} */\r\n    this.placeholder = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.slide = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.isDecoding = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = undefined;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content', 'div');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    if (!this.isImageContent()\r\n      || !this.element\r\n      || this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src ?? '';\r\n    imageElement.alt = this.data.alt ?? '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide && this.element) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch(\r\n      'contentResize',\r\n      { content: this, width, height }).defaultPrevented\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch(\r\n          'imageSizeChange',\r\n          { slide: this.slide, width, height, content: this }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\r\n      return;\r\n    }\r\n\r\n    const image = /** @type HTMLImageElement */ (this.element);\r\n    const sizesWidth = this.instance.applyFilters(\r\n      'srcsetSizesWidth',\r\n      this.displayedImageWidth,\r\n      this\r\n    );\r\n\r\n    if (\r\n      !image.dataset.largestUsedSize\r\n      || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)\r\n    ) {\r\n      image.sizes = sizesWidth + 'px';\r\n      image.dataset.largestUsedSize = String(sizesWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = undefined;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = undefined;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\r\n      errorMsgEl.innerText = this.instance.options?.errorMsg ?? '';\r\n      errorMsgEl = /** @type {HTMLDivElement} */ (this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      ));\r\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached || !this.element) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.slide && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented\r\n      || !this.slide) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n      // add image to slide when it becomes active,\r\n      // even if it's not finished decoding\r\n      this.appendImage();\r\n    } else if (this.isError()) {\r\n      this.load(false, true); // try to reload\r\n    }\r\n\r\n    if (this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  const content = instance.createContentFromData(itemData, index);\r\n  /** @type {ZoomLevel | undefined} */\r\n  let zoomLevel;\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset, and we need to define sizes\r\n  if (options) {\r\n    zoomLevel = new ZoomLevel(options, itemData, -1);\r\n\r\n    let viewportSize;\r\n    if (instance.pswp) {\r\n      viewportSize = instance.pswp.viewportSize;\r\n    } else {\r\n      viewportSize = getViewportSize(options, instance);\r\n    }\r\n\r\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n    zoomLevel.update(content.width, content.height, panAreaSize);\r\n  }\r\n\r\n  content.lazyLoad();\r\n\r\n  if (zoomLevel) {\r\n    content.setDisplayedSize(\r\n      Math.ceil(content.width * zoomLevel.initial),\r\n      Math.ceil(content.height * zoomLevel.initial)\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} initialIndex\r\n   */\r\n  loadSlideByIndex(initialIndex) {\r\n    const index = this.pswp.getLoopedIndex(initialIndex);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      this.addToCache(content);\r\n    }\r\n\r\n    // assign slide to content\r\n    content.setSlide(slide);\r\n\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = [];\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import Eventable from './eventable.js';\r\nimport { getElementsFromOption } from '../util/util.js';\r\nimport Content from '../slide/content.js';\r\nimport { lazyLoadData } from '../slide/loader.js';\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems = 0;\r\n    const dataSource = this.options?.dataSource;\r\n\r\n    if (dataSource && 'length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\r\n  getItemData(index) {\r\n    const dataSource = this.options?.dataSource;\r\n    /** @type {SlideData | HTMLElement} */\r\n    let dataSourceItem = {};\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options?.children || this.options?.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (\r\n      element.tagName === 'A'\r\n        ? element\r\n        : element.querySelector('a')\r\n    );\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\r\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt') ?? '';\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n","import {\r\n  setTransform,\r\n  equalizePoints,\r\n  decodeImage,\r\n  toTransformString\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this.isOpen = false;\r\n    this.isClosing = false;\r\n    this.isOpening = false;\r\n    /**\r\n     * @private\r\n     * @type {number | false | undefined}\r\n     */\r\n    this._duration = undefined;\r\n    /** @private */\r\n    this._useAnimation = false;\r\n    /** @private */\r\n    this._croppedZoom = false;\r\n    /** @private */\r\n    this._animateRootOpacity = false;\r\n    /** @private */\r\n    this._animateBgOpacity = false;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | HTMLImageElement | null | undefined }\r\n     */\r\n    this._placeholder = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._opacityElement = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._cropContainer1 = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLElement | null | undefined }\r\n     */\r\n    this._cropContainer2 = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Bounds | undefined}\r\n     */\r\n    this._thumbBounds = undefined;\r\n\r\n\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n  }\r\n\r\n  /** @private */\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = undefined;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = undefined;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide?.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = Boolean(this._duration && this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && slide?.content.usePlaceholder()\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening && slide) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity ?? false;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide?.holderElement;\r\n\r\n      if (pswp.container) {\r\n        pswp.container.style.overflow = 'hidden';\r\n        pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n      }\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity && pswp.bg) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = '1';\r\n        }\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      if (pswp.mainScroll.itemHolders[0]) {\r\n        pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      }\r\n      if (pswp.mainScroll.itemHolders[2]) {\r\n        pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n      }\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve(true);\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve(true);\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _initiate() {\r\n    this.pswp.element?.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element?.classList.toggle('pswp--ui-visible', this.isOpening);\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom && pswp.container) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide?.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom && this._cropContainer1 && this._cropContainer2) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      if (pswp.currSlide) {\r\n        pswp.currSlide.zoomAndPanToInitial();\r\n        this._animateTo(\r\n          pswp.currSlide.container,\r\n          'transform',\r\n          pswp.currSlide.getCurrentTransform()\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this._animateBgOpacity && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    // do not animate opacity if it's already at 0\r\n    if (this._animateBgOpacity && pswp.bgOpacity > 0.01 && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {boolean} [animate]\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom && innerRect && this._cropContainer1 && this._cropContainer2) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    if (currSlide) {\r\n      equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n      currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n      if (animate) {\r\n        this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n      } else {\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\r\n\r\nexport default Opener;\r\n","import {\r\n  createElement,\r\n  equalizePoints,\r\n  pointsEqual,\r\n  clamp,\r\n} from './util/util.js';\r\n\r\nimport DOMEvents from './util/dom-events.js';\r\nimport Slide from './slide/slide.js';\r\nimport Gestures from './gestures/gestures.js';\r\nimport MainScroll from './main-scroll.js';\r\n\r\nimport Keyboard from './keyboard.js';\r\nimport Animations from './util/animations.js';\r\nimport ScrollWheel from './scroll-wheel.js';\r\nimport UI from './ui/ui.js';\r\nimport { getViewportSize } from './util/viewport-size.js';\r\nimport { getThumbBounds } from './slide/get-thumb-bounds.js';\r\nimport PhotoSwipeBase from './core/base.js';\r\nimport Opener from './opener.js';\r\nimport ContentLoader from './slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/** @typedef {import('./slide/get-thumb-bounds').Bounds} Bounds */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x: number; y: number; id?: string | number }} Point */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\r\n\r\n/** @typedef {Partial<PreparedPhotoSwipeOptions>} PhotoSwipeOptions https://photoswipe.com/options/ */\r\n/**\r\n * @typedef {Object} PreparedPhotoSwipeOptions\r\n *\r\n * @prop {DataSource} [dataSource]\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean} [wheelToZoom]\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding} [padding]\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Point, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} hideAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} showAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} zoomAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} imageClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} bgClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} tapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} doubleTapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipeBase) => Point} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string} [mainClass]\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement} [appendToEl]\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string} [closeTitle]\r\n * Translating\r\n *\r\n * @prop {string} [zoomTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowNextTitle]\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean} [arrowPrev]\r\n * @prop {boolean} [arrowNext]\r\n * @prop {boolean} [zoom]\r\n * @prop {boolean} [close]\r\n * @prop {boolean} [counter]\r\n *\r\n * @prop {string} [arrowPrevSVG]\r\n * @prop {string} [arrowNextSVG]\r\n * @prop {string} [zoomSVG]\r\n * @prop {string} [closeSVG]\r\n * @prop {string} [counterSVG]\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * @prop {string} [arrowNextTitle]\r\n * @prop {string} [zoomTitle]\r\n * @prop {string} [closeTitle]\r\n * @prop {string} [counterTitle]\r\n *\r\n * @prop {ZoomLevelOption} [initialZoomLevel]\r\n * @prop {ZoomLevelOption} [secondaryZoomLevel]\r\n * @prop {ZoomLevelOption} [maxZoomLevel]\r\n *\r\n * @prop {boolean} [mouseMovePan]\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean} [showHideOpacity]\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean} [preloadFirstSlide]\r\n * @prop {ElementProvider} [gallery]\r\n * @prop {string} [gallerySelector]\r\n * @prop {ElementProvider} [children]\r\n * @prop {string} [childSelector]\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PreparedPhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.options = this._prepareOptions(options || {});\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.offset = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * @type {Point}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.viewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     */\r\n    this.bgOpacity = 1;\r\n    this.currIndex = 0;\r\n    this.potentialIndex = 0;\r\n    this.isOpen = false;\r\n    this.isDestroying = false;\r\n    this.hasMouse = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {SlideData}\r\n     */\r\n    this._initialItemData = {};\r\n    /** @type {Bounds | undefined} */\r\n    this._initialThumbBounds = undefined;\r\n\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.topBar = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.template = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.container = undefined;\r\n    /** @type {HTMLElement | undefined} */\r\n    this.scrollWrap = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.currSlide = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n    this.animations = new Animations();\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  /** @returns {boolean} */\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return false;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    if (this.element) {\r\n      this.element.className += ' ' + rootClasses;\r\n    }\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      const { itemHolders } = this.mainScroll;\r\n\r\n      // Add content to the previous and next slide\r\n      if (itemHolders[0]) {\r\n        itemHolders[0].el.style.display = 'block';\r\n        this.setContent(itemHolders[0], this.currIndex - 1);\r\n      }\r\n      if (itemHolders[2]) {\r\n        itemHolders[2].el.style.display = 'block';\r\n        this.setContent(itemHolders[2], this.currIndex + 1);\r\n      }\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    if (this.mainScroll.itemHolders[1]) {\r\n      this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    }\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   * @returns {number}\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    return clamp(index, 0, numSlides - 1);\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.appendHeavy();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide?.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide?.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this._listeners = {};\r\n\r\n    if (this.scrollWrap) {\r\n      this.scrollWrap.ontouchmove = null;\r\n      this.scrollWrap.ontouchend = null;\r\n    }\r\n\r\n    this.element?.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.destroy();\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = (this.currSlide?.index ?? 0) - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide?.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean} [force] If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = undefined;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  /** @returns {Point} */\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean} [force] Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    if (this.bg) {\r\n      this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element?.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp', 'div');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', 'div', this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', 'section', this.element);\r\n    this.container = createElement('pswp__container', 'div', this.scrollWrap);\r\n\r\n    // aria pattern: carousel\r\n    this.scrollWrap.setAttribute('aria-roledescription', 'carousel');\r\n    this.container.setAttribute('aria-live', 'off');\r\n    this.container.setAttribute('id', 'pswp__items');\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   *\r\n   * @returns {Bounds | undefined}\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continuous loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PhotoSwipeOptions} options\r\n   * @returns {PreparedPhotoSwipeOptions}\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PreparedPhotoSwipeOptions} */\r\n    return {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n\r\nexport default PhotoSwipe;\r\n"],"names":["createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","undefined","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","setTransform","style","transform","defaultCSSEasing","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","removeTransitionStyle","decodeImage","img","decode","catch","complete","Promise","resolve","reject","onload","onerror","LOAD_STATE","IDLE","LOADING","LOADED","ERROR","specialKeyUsed","e","button","ctrlKey","metaKey","altKey","shiftKey","getElementsFromOption","option","legacySelector","parent","elements","Element","NodeList","Array","isArray","from","selector","querySelectorAll","isSafari","navigator","vendor","match","supportsPassive","window","addEventListener","Object","defineProperty","get","DOMEvents","constructor","this","_pool","add","target","type","listener","passive","_toggleListener","remove","removeAll","forEach","poolItem","unbind","skipPool","methodName","types","split","eType","filter","push","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","Number","getPanAreaSize","PanBounds","slide","currZoomLevel","center","update","_updateAxis","dispatch","reset","axis","elSize","paddingProp","data","panAreaSize","correctPan","panOffset","MAX_IMAGE_WIDTH","ZoomLevel","elementSize","fit","fill","vFill","initial","secondary","maxWidth","maxHeight","hRatio","vRatio","_getInitial","_getSecondary","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionName","optionValue","Slide","isActive","currIndex","currentResolution","pan","isFirstSlide","opener","isOpen","content","contentLoader","getContentBySlide","container","holderElement","heavyAppended","bounds","prevDisplayedWidth","prevDisplayedHeight","setIsActive","activate","deactivate","append","transformOrigin","calculateSize","load","updateContentSize","appendHeavy","zoomAndPanToInitial","applyCurrentZoomPan","appendHeavyNearby","mainScroll","isShifted","defaultPrevented","destroy","hasSlide","resize","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","getPlaceholderElement","placeholder","element","zoomTo","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","toggleZoom","zoomAnimationDuration","point","totalPanDistance","getViewportCenterPoint","zoomFactor","panX","panY","isPannable","Boolean","_applyZoomTransform","currSlide","zoom","newResolution","PAN_END_FRICTION","VERTICAL_DRAG_FRICTION","MIN_RATIO_TO_CLOSE","MIN_NEXT_SLIDE_SPEED","project","initialVelocity","decelerationRate","DragHandler","gestures","startPan","start","stopAll","change","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","mainScrollChanged","_panOrMoveMainScroll","end","velocity","indexDiff","mainScrollShiftDiff","getCurrSlideX","currentSlideVisibilityRatio","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","moveTo","newPan","allowPanToNext","currSlideMainScrollX","isLeftToRight","isRightToLeft","wasAtMinPanPosition","wasAtMaxPanPosition","potentialPan","customFriction","correctedPan","UPPER_ZOOM_FRICTION","LOWER_ZOOM_FRICTION","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_wasOverFitZoomLevel","_startZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","click","originalEvent","targetClassList","classList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","tap","doubleTap","actionName","actionFullName","clickToCloseNonZoomable","toggle","call","AXIS_SWIPE_HYSTERISIS","DOUBLE_TAP_DELAY","MIN_TAP_DISTANCE","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","PointerEvent","supportsTouch","maxTouchPoints","_intervalTime","_velocityCalculated","isDragging","isZooming","raf","_tapTimer","drag","tapHandler","on","events","scrollWrap","_onClick","bind","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","onPointerMove","onPointerUp","isMousePointer","pointerType","mouseDetected","_preventPointerEventBehaviour","_updatePoints","_clearTapTimer","preventDefault","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","Date","_updateVelocity","_finishTap","_updatePrevPoints","requestAnimationFrame","time","_getVelocity","indexOf","tapDelay","doubleTapAction","setTimeout","clearTimeout","displacement","cancelAnimationFrame","pointerEvent","pointerIndex","findIndex","ongoingPointer","pointerId","splice","_convertEventPosToPoint","length","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MAIN_SCROLL_END_FRICTION","MainScroll","slideWidth","_currPositionIndex","_prevPositionIndex","_containerShiftIndex","itemHolders","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","resetPosition","appendHolders","i","setAttribute","display","canBeSwiped","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","positionDifference","tempHolder","diffAbs","shift","setContent","pop","unshift","updateLazy","dragging","newSlideIndexOffset","KeyboardKeyCodesMap","Escape","z","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Tab","getKeyboardEventKey","key","isKeySupported","Keyboard","_wasFocused","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","activeElement","returnFocus","focus","keydownAction","isForward","keyCode","escKey","arrowKeys","template","DEFAULT_EASING","CSSAnimation","props","onFinish","_target","_onComplete","_finished","_onTransitionEnd","_helperTimeout","_finalizeAnimation","removeEventListener","DEFAULT_NATURAL_FREQUENCY","DEFAULT_DAMPING_RATIO","SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","easeFrame","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","_raf","easer","prevTime","animationLoop","Animations","activeAnimations","_start","isSpring","animation","stop","isPanRunning","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","addElementHTML","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","UIElement","elementHTML","html","isButton","toLowerCase","title","ariaLabel","ariaText","innerHTML","onInit","onClick","onclick","appendTo","topBar","applyFilters","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","toggleIndicatorClass","setIndicatorVisibility","visible","updatePreloaderVisibility","isLoading","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","isRegistered","uiElementsData","items","_lastUpdatedZoomLevel","init","sort","a","b","uiElementData","registerElement","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","potentialZoomLevel","imageClickAction","getBoundsByElement","thumbAreaRect","getBoundingClientRect","left","top","getCroppedBoundsByElement","imageWidth","imageHeight","fillZoomLevel","offsetX","offsetY","innerRect","getThumbBounds","instance","thumbBounds","thumbnail","thumbSelector","matches","querySelector","thumbCropped","PhotoSwipeEvent","details","assign","Eventable","_listeners","_filters","addFilter","fn","priority","f1","f2","removeFilter","args","apply","off","Placeholder","imageSrc","imgEl","decoding","alt","src","parentNode","Content","displayedImageWidth","displayedImageHeight","isAttached","isDecoding","state","removePlaceholder","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderEl","parentElement","prepend","placeholderSrc","msrc","isImageContent","loadImage","imageElement","updateSrcsetSizes","srcset","onLoaded","onError","setSlide","displayError","isError","isInitialSizeUpdate","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","lazyLoad","errorMsgEl","errorMsg","supportsDecode","finally","appendImage","MIN_SLIDES_TO_CACHE","lazyLoadData","createContentFromData","zoomLevel","ceil","lazyLoadSlide","getItemData","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","initialIndex","getContentByIndex","addToCache","removeByIndex","indexToRemove","item","removedItem","find","PhotoSwipeBase","numItems","dataSource","_getGalleryDOMElements","gallery","dataSourceItem","_domElementToItemData","galleryElement","children","childSelector","linkEl","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","currentSrc","getAttribute","pswpCropped","cropped","MIN_OPACITY","Opener","isClosed","isOpening","_duration","_useAnimation","_croppedZoom","_animateRootOpacity","_animateBgOpacity","_placeholder","_opacityElement","_cropContainer1","_cropContainer2","_thumbBounds","_prepareOpen","open","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","showAnimationDuration","showHideAnimationType","showHideOpacity","_initialThumbBounds","_animateZoom","bg","opacity","overflow","_setClosedStateZoomPan","willChange","decoded","isDelaying","_initiate","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","defaultOptions","bgClickAction","tapAction","PhotoSwipe","super","_prepareOptions","_prevViewportSize","isDestroying","hasMouse","_initialItemData","keyboard","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_handlePageResize","_updatePageScrollOffset","goTo","next","prev","refreshSlideContent","slideIndex","potentialHolderIndex","holder","matchMedia","test","userAgent","setScrollOffset","body"],"sourceRoot":""}